using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using MongoDB.Bson;
using Greenergy.TeslaTools;

namespace Greenergy.TeslaCharger.MongoModels
{
    public class TeslaVehicleMongo
    {
        [MongoDB.Bson.Serialization.Attributes.BsonId]
        // standard BSonId generated by MongoDb
        public ObjectId InternalId { get; set; }

        [Required]
        public string OwnerEmail { get; set; }
        [Required]
        public string AccessToken { get; set; }
        [Required]
        public string Id { get; set; }
        [Required]
        public string VIN { get; set; }
        [Required]
        public string DisplayName { get; set; }

        // Any specific constraint that applies on a given date will override all non-specific constraints
        // If multiple non-specific constraints are set, they should be non-overlapping
        // If multiple specific constraints are set with the same date, only one of those constraints will apply
        [Required]
        public List<ChargingConstraintMongo> ChargingConstraints;

        public static explicit operator TeslaVehicle(TeslaVehicleMongo tm)
        {
            return new TeslaVehicle
            {
                Owner = new TeslaOwner(tm.OwnerEmail, tm.AccessToken),
                Id = tm.Id,
                VIN = tm.VIN,
                DisplayName = tm.DisplayName
            };
        }

        public void Validate()
        {
            var constraintCount = ChargingConstraints?.Count;
            if (constraintCount.Equals(0))
            {
                throw new Exception("At least one charging constraint required.");
            }
            foreach (var c in ChargingConstraints)
            {
                c.Validate();
            }
        }
    }
}